{
  "version": 3,
  "sources": ["../../cpt2js/dist/cpt2js.js"],
  "sourcesContent": ["/*!\n* Copyright (c) 2022 WeatherLayers.com\n*\n* This Source Code Form is subject to the terms of the Mozilla Public\n* License, v. 2.0. If a copy of the MPL was not distributed with this\n* file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar limit;\nvar hasRequiredLimit;\n\nfunction requireLimit () {\n\tif (hasRequiredLimit) return limit;\n\thasRequiredLimit = 1;\n\tlimit = (x, min=0, max=1) => {\n\t    return x < min ? min : x > max ? max : x;\n\t};\n\treturn limit;\n}\n\nvar clip_rgb;\nvar hasRequiredClip_rgb;\n\nfunction requireClip_rgb () {\n\tif (hasRequiredClip_rgb) return clip_rgb;\n\thasRequiredClip_rgb = 1;\n\tconst limit = requireLimit();\n\n\tclip_rgb = (rgb) => {\n\t    rgb._clipped = false;\n\t    rgb._unclipped = rgb.slice(0);\n\t    for (let i=0; i<=3; i++) {\n\t        if (i < 3) {\n\t            if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;\n\t            rgb[i] = limit(rgb[i], 0, 255);\n\t        } else if (i === 3) {\n\t            rgb[i] = limit(rgb[i], 0, 1);\n\t        }\n\t    }\n\t    return rgb;\n\t};\n\treturn clip_rgb;\n}\n\nvar type;\nvar hasRequiredType;\n\nfunction requireType () {\n\tif (hasRequiredType) return type;\n\thasRequiredType = 1;\n\t// ported from jQuery's $.type\n\tconst classToType = {};\n\tfor (let name of ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Undefined', 'Null']) {\n\t    classToType[`[object ${name}]`] = name.toLowerCase();\n\t}\n\ttype = function(obj) {\n\t    return classToType[Object.prototype.toString.call(obj)] || \"object\";\n\t};\n\treturn type;\n}\n\nvar unpack;\nvar hasRequiredUnpack;\n\nfunction requireUnpack () {\n\tif (hasRequiredUnpack) return unpack;\n\thasRequiredUnpack = 1;\n\tconst type = requireType();\n\n\tunpack = (args, keyOrder=null) => {\n\t\t// if called with more than 3 arguments, we return the arguments\n\t    if (args.length >= 3) return Array.prototype.slice.call(args);\n\t    // with less than 3 args we check if first arg is object\n\t    // and use the keyOrder string to extract and sort properties\n\t\tif (type(args[0]) == 'object' && keyOrder) {\n\t\t\treturn keyOrder.split('')\n\t\t\t\t.filter(k => args[0][k] !== undefined)\n\t\t\t\t.map(k => args[0][k]);\n\t\t}\n\t\t// otherwise we just return the first argument\n\t\t// (which we suppose is an array of args)\n\t    return args[0];\n\t};\n\treturn unpack;\n}\n\nvar last;\nvar hasRequiredLast;\n\nfunction requireLast () {\n\tif (hasRequiredLast) return last;\n\thasRequiredLast = 1;\n\tconst type = requireType();\n\n\tlast = (args) => {\n\t    if (args.length < 2) return null;\n\t    const l = args.length-1;\n\t    if (type(args[l]) == 'string') return args[l].toLowerCase();\n\t    return null;\n\t};\n\treturn last;\n}\n\nvar utils;\nvar hasRequiredUtils;\n\nfunction requireUtils () {\n\tif (hasRequiredUtils) return utils;\n\thasRequiredUtils = 1;\n\tconst PI = Math.PI;\n\n\tutils = {\n\t\tclip_rgb: requireClip_rgb(),\n\t\tlimit: requireLimit(),\n\t\ttype: requireType(),\n\t\tunpack: requireUnpack(),\n\t\tlast: requireLast(),\n\t\tPI: PI,\n\t\tTWOPI: PI*2,\n\t\tPITHIRD: PI/3,\n\t\tDEG2RAD: PI / 180,\n\t\tRAD2DEG: 180 / PI\n\t};\n\treturn utils;\n}\n\nvar input;\nvar hasRequiredInput;\n\nfunction requireInput () {\n\tif (hasRequiredInput) return input;\n\thasRequiredInput = 1;\n\tinput = {\n\t\tformat: {},\n\t\tautodetect: []\n\t};\n\treturn input;\n}\n\nvar Color_1;\nvar hasRequiredColor;\n\nfunction requireColor () {\n\tif (hasRequiredColor) return Color_1;\n\thasRequiredColor = 1;\n\tconst {last, clip_rgb, type} = requireUtils();\n\tconst _input = requireInput();\n\n\tclass Color {\n\n\t    constructor(...args) {\n\t        const me = this;\n\t        if (type(args[0]) === 'object' &&\n\t            args[0].constructor &&\n\t            args[0].constructor === this.constructor) {\n\t            // the argument is already a Color instance\n\t            return args[0];\n\t        }\n\n\t        // last argument could be the mode\n\t        let mode = last(args);\n\t        let autodetect = false;\n\n\t        if (!mode) {\n\t            autodetect = true;\n\t            if (!_input.sorted) {\n\t                _input.autodetect = _input.autodetect.sort((a,b) => b.p - a.p);\n\t                _input.sorted = true;\n\t            }\n\t            // auto-detect format\n\t            for (let chk of _input.autodetect) {\n\t                mode = chk.test(...args);\n\t                if (mode) break;\n\t            }\n\t        }\n\n\t        if (_input.format[mode]) {\n\t            const rgb = _input.format[mode].apply(null, autodetect ? args : args.slice(0,-1));\n\t            me._rgb = clip_rgb(rgb);\n\t        } else {\n\t            throw new Error('unknown format: '+args);\n\t        }\n\n\t        // add alpha channel\n\t        if (me._rgb.length === 3) me._rgb.push(1);\n\t    }\n\n\t    toString() {\n\t        if (type(this.hex) == 'function') return this.hex();\n\t        return `[${this._rgb.join(',')}]`;\n\t    }\n\n\t}\n\n\tColor_1 = Color;\n\treturn Color_1;\n}\n\nvar chroma_1;\nvar hasRequiredChroma;\n\nfunction requireChroma () {\n\tif (hasRequiredChroma) return chroma_1;\n\thasRequiredChroma = 1;\n\tconst chroma = (...args) => {\n\t\treturn new chroma.Color(...args);\n\t};\n\n\tchroma.Color = requireColor();\n\tchroma.version = '@@version';\n\n\tchroma_1 = chroma;\n\treturn chroma_1;\n}\n\nvar chromaExports = requireChroma();\nvar chroma = /*@__PURE__*/getDefaultExportFromCjs(chromaExports);\n\nvar css = {};\n\nvar hsl2css_1;\nvar hasRequiredHsl2css;\n\nfunction requireHsl2css () {\n\tif (hasRequiredHsl2css) return hsl2css_1;\n\thasRequiredHsl2css = 1;\n\tconst {unpack, last} = requireUtils();\n\tconst rnd = (a) => Math.round(a*100)/100;\n\n\t/*\n\t * supported arguments:\n\t * - hsl2css(h,s,l)\n\t * - hsl2css(h,s,l,a)\n\t * - hsl2css([h,s,l], mode)\n\t * - hsl2css([h,s,l,a], mode)\n\t * - hsl2css({h,s,l,a}, mode)\n\t */\n\tconst hsl2css = (...args) => {\n\t    const hsla = unpack(args, 'hsla');\n\t    let mode = last(args) || 'lsa';\n\t    hsla[0] = rnd(hsla[0] || 0);\n\t    hsla[1] = rnd(hsla[1]*100) + '%';\n\t    hsla[2] = rnd(hsla[2]*100) + '%';\n\t    if (mode === 'hsla' || (hsla.length > 3 && hsla[3]<1)) {\n\t        hsla[3] = hsla.length > 3 ? hsla[3] : 1;\n\t        mode = 'hsla';\n\t    } else {\n\t        hsla.length = 3;\n\t    }\n\t    return `${mode}(${hsla.join(',')})`;\n\t};\n\n\thsl2css_1 = hsl2css;\n\treturn hsl2css_1;\n}\n\nvar rgb2hsl_1;\nvar hasRequiredRgb2hsl;\n\nfunction requireRgb2hsl () {\n\tif (hasRequiredRgb2hsl) return rgb2hsl_1;\n\thasRequiredRgb2hsl = 1;\n\tconst {unpack} = requireUtils();\n\n\t/*\n\t * supported arguments:\n\t * - rgb2hsl(r,g,b)\n\t * - rgb2hsl(r,g,b,a)\n\t * - rgb2hsl([r,g,b])\n\t * - rgb2hsl([r,g,b,a])\n\t * - rgb2hsl({r,g,b,a})\n\t */\n\tconst rgb2hsl = (...args) => {\n\t    args = unpack(args, 'rgba');\n\t    let [r,g,b] = args;\n\n\t    r /= 255;\n\t    g /= 255;\n\t    b /= 255;\n\n\t    const min = Math.min(r, g, b);\n\t    const max = Math.max(r, g, b);\n\n\t    const l = (max + min) / 2;\n\t    let s, h;\n\n\t    if (max === min){\n\t        s = 0;\n\t        h = Number.NaN;\n\t    } else {\n\t        s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n\t    }\n\n\t    if (r == max) h = (g - b) / (max - min);\n\t    else if (g == max) h = 2 + (b - r) / (max - min);\n\t    else if (b == max) h = 4 + (r - g) / (max - min);\n\n\t    h *= 60;\n\t    if (h < 0) h += 360;\n\t    if (args.length>3 && args[3]!==undefined) return [h,s,l,args[3]];\n\t    return [h,s,l];\n\t};\n\n\trgb2hsl_1 = rgb2hsl;\n\treturn rgb2hsl_1;\n}\n\nvar rgb2css_1;\nvar hasRequiredRgb2css;\n\nfunction requireRgb2css () {\n\tif (hasRequiredRgb2css) return rgb2css_1;\n\thasRequiredRgb2css = 1;\n\tconst {unpack, last} = requireUtils();\n\tconst hsl2css = requireHsl2css();\n\tconst rgb2hsl = requireRgb2hsl();\n\tconst {round} = Math;\n\n\t/*\n\t * supported arguments:\n\t * - rgb2css(r,g,b)\n\t * - rgb2css(r,g,b,a)\n\t * - rgb2css([r,g,b], mode)\n\t * - rgb2css([r,g,b,a], mode)\n\t * - rgb2css({r,g,b,a}, mode)\n\t */\n\tconst rgb2css = (...args) => {\n\t    const rgba = unpack(args, 'rgba');\n\t    let mode = last(args) || 'rgb';\n\t    if (mode.substr(0,3) == 'hsl') {\n\t        return hsl2css(rgb2hsl(rgba), mode);\n\t    }\n\t    rgba[0] = round(rgba[0]);\n\t    rgba[1] = round(rgba[1]);\n\t    rgba[2] = round(rgba[2]);\n\t    if (mode === 'rgba' || (rgba.length > 3 && rgba[3]<1)) {\n\t        rgba[3] = rgba.length > 3 ? rgba[3] : 1;\n\t        mode = 'rgba';\n\t    }\n\t    return `${mode}(${rgba.slice(0,mode==='rgb'?3:4).join(',')})`;\n\t};\n\n\trgb2css_1 = rgb2css;\n\treturn rgb2css_1;\n}\n\nvar hsl2rgb_1;\nvar hasRequiredHsl2rgb;\n\nfunction requireHsl2rgb () {\n\tif (hasRequiredHsl2rgb) return hsl2rgb_1;\n\thasRequiredHsl2rgb = 1;\n\tconst {unpack} = requireUtils();\n\tconst {round} = Math;\n\n\tconst hsl2rgb = (...args) => {\n\t    args = unpack(args, 'hsl');\n\t    const [h,s,l] = args;\n\t    let r,g,b;\n\t    if (s === 0) {\n\t        r = g = b = l*255;\n\t    } else {\n\t        const t3 = [0,0,0];\n\t        const c = [0,0,0];\n\t        const t2 = l < 0.5 ? l * (1+s) : l+s-l*s;\n\t        const t1 = 2 * l - t2;\n\t        const h_ = h / 360;\n\t        t3[0] = h_ + 1/3;\n\t        t3[1] = h_;\n\t        t3[2] = h_ - 1/3;\n\t        for (let i=0; i<3; i++) {\n\t            if (t3[i] < 0) t3[i] += 1;\n\t            if (t3[i] > 1) t3[i] -= 1;\n\t            if (6 * t3[i] < 1)\n\t                c[i] = t1 + (t2 - t1) * 6 * t3[i];\n\t            else if (2 * t3[i] < 1)\n\t                c[i] = t2;\n\t            else if (3 * t3[i] < 2)\n\t                c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n\t            else\n\t                c[i] = t1;\n\t        }\n\t        [r,g,b] = [round(c[0]*255),round(c[1]*255),round(c[2]*255)];\n\t    }\n\t    if (args.length > 3) {\n\t        // keep alpha channel\n\t        return [r,g,b,args[3]];\n\t    }\n\t    return [r,g,b,1];\n\t};\n\n\thsl2rgb_1 = hsl2rgb;\n\treturn hsl2rgb_1;\n}\n\nvar css2rgb_1;\nvar hasRequiredCss2rgb;\n\nfunction requireCss2rgb () {\n\tif (hasRequiredCss2rgb) return css2rgb_1;\n\thasRequiredCss2rgb = 1;\n\tconst hsl2rgb = requireHsl2rgb();\n\tconst input = requireInput();\n\n\tconst RE_RGB = /^rgb\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*\\)$/;\n\tconst RE_RGBA = /^rgba\\(\\s*(-?\\d+),\\s*(-?\\d+)\\s*,\\s*(-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\tconst RE_RGB_PCT = /^rgb\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\tconst RE_RGBA_PCT = /^rgba\\(\\s*(-?\\d+(?:\\.\\d+)?)%,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\tconst RE_HSL = /^hsl\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*\\)$/;\n\tconst RE_HSLA = /^hsla\\(\\s*(-?\\d+(?:\\.\\d+)?),\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)$/;\n\n\tconst {round} = Math;\n\n\tconst css2rgb = (css) => {\n\t    css = css.toLowerCase().trim();\n\t    let m;\n\n\t    if (input.format.named) {\n\t        try {\n\t            return input.format.named(css);\n\t        } catch (e) {\n\t            // eslint-disable-next-line\n\t        }\n\t    }\n\n\t    // rgb(250,20,0)\n\t    if ((m = css.match(RE_RGB))) {\n\t        const rgb = m.slice(1,4);\n\t        for (let i=0; i<3; i++) {\n\t            rgb[i] = +rgb[i];\n\t        }\n\t        rgb[3] = 1;  // default alpha\n\t        return rgb;\n\t    }\n\n\t    // rgba(250,20,0,0.4)\n\t    if ((m = css.match(RE_RGBA))) {\n\t        const rgb = m.slice(1,5);\n\t        for (let i=0; i<4; i++) {\n\t            rgb[i] = +rgb[i];\n\t        }\n\t        return rgb;\n\t    }\n\n\t    // rgb(100%,0%,0%)\n\t    if ((m = css.match(RE_RGB_PCT))) {\n\t        const rgb = m.slice(1,4);\n\t        for (let i=0; i<3; i++) {\n\t            rgb[i] = round(rgb[i] * 2.55);\n\t        }\n\t        rgb[3] = 1;  // default alpha\n\t        return rgb;\n\t    }\n\n\t    // rgba(100%,0%,0%,0.4)\n\t    if ((m = css.match(RE_RGBA_PCT))) {\n\t        const rgb = m.slice(1,5);\n\t        for (let i=0; i<3; i++) {\n\t            rgb[i] = round(rgb[i] * 2.55);\n\t        }\n\t        rgb[3] = +rgb[3];\n\t        return rgb;\n\t    }\n\n\t    // hsl(0,100%,50%)\n\t    if ((m = css.match(RE_HSL))) {\n\t        const hsl = m.slice(1,4);\n\t        hsl[1] *= 0.01;\n\t        hsl[2] *= 0.01;\n\t        const rgb = hsl2rgb(hsl);\n\t        rgb[3] = 1;\n\t        return rgb;\n\t    }\n\n\t    // hsla(0,100%,50%,0.5)\n\t    if ((m = css.match(RE_HSLA))) {\n\t        const hsl = m.slice(1,4);\n\t        hsl[1] *= 0.01;\n\t        hsl[2] *= 0.01;\n\t        const rgb = hsl2rgb(hsl);\n\t        rgb[3] = +m[4];  // default alpha = 1\n\t        return rgb;\n\t    }\n\t};\n\n\tcss2rgb.test = (s) => {\n\t    return RE_RGB.test(s) ||\n\t        RE_RGBA.test(s) ||\n\t        RE_RGB_PCT.test(s) ||\n\t        RE_RGBA_PCT.test(s) ||\n\t        RE_HSL.test(s) ||\n\t        RE_HSLA.test(s);\n\t};\n\n\tcss2rgb_1 = css2rgb;\n\treturn css2rgb_1;\n}\n\nvar hasRequiredCss;\n\nfunction requireCss () {\n\tif (hasRequiredCss) return css;\n\thasRequiredCss = 1;\n\tconst chroma = requireChroma();\n\tconst Color = requireColor();\n\tconst input = requireInput();\n\tconst {type} = requireUtils();\n\n\tconst rgb2css = requireRgb2css();\n\tconst css2rgb = requireCss2rgb();\n\n\tColor.prototype.css = function(mode) {\n\t    return rgb2css(this._rgb, mode);\n\t};\n\n\tchroma.css = (...args) => new Color(...args, 'css');\n\n\tinput.format.css = css2rgb;\n\n\tinput.autodetect.push({\n\t    p: 5,\n\t    test: (h, ...rest) => {\n\t        if (!rest.length && type(h) === 'string' && css2rgb.test(h)) {\n\t            return 'css';\n\t        }\n\t    }\n\t});\n\treturn css;\n}\n\nrequireCss();\n\nvar hex = {};\n\nvar rgb2hex_1;\nvar hasRequiredRgb2hex;\n\nfunction requireRgb2hex () {\n\tif (hasRequiredRgb2hex) return rgb2hex_1;\n\thasRequiredRgb2hex = 1;\n\tconst {unpack, last} = requireUtils();\n\tconst {round} = Math;\n\n\tconst rgb2hex = (...args) => {\n\t    let [r,g,b,a] = unpack(args, 'rgba');\n\t    let mode = last(args) || 'auto';\n\t    if (a === undefined) a = 1;\n\t    if (mode === 'auto') {\n\t        mode = a < 1 ? 'rgba' : 'rgb';\n\t    }\n\t    r = round(r);\n\t    g = round(g);\n\t    b = round(b);\n\t    const u = r << 16 | g << 8 | b;\n\t    let str = \"000000\" + u.toString(16); //#.toUpperCase();\n\t    str = str.substr(str.length - 6);\n\t    let hxa = '0' + round(a * 255).toString(16);\n\t    hxa = hxa.substr(hxa.length - 2);\n\t    switch (mode.toLowerCase()) {\n\t        case 'rgba': return `#${str}${hxa}`;\n\t        case 'argb': return `#${hxa}${str}`;\n\t        default: return `#${str}`;\n\t    }\n\t};\n\n\trgb2hex_1 = rgb2hex;\n\treturn rgb2hex_1;\n}\n\nvar hex2rgb_1;\nvar hasRequiredHex2rgb;\n\nfunction requireHex2rgb () {\n\tif (hasRequiredHex2rgb) return hex2rgb_1;\n\thasRequiredHex2rgb = 1;\n\tconst RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\tconst RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;\n\n\tconst hex2rgb = (hex) => {\n\t    if (hex.match(RE_HEX)) {\n\t        // remove optional leading #\n\t        if (hex.length === 4 || hex.length === 7) {\n\t            hex = hex.substr(1);\n\t        }\n\t        // expand short-notation to full six-digit\n\t        if (hex.length === 3) {\n\t            hex = hex.split('');\n\t            hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n\t        }\n\t        const u = parseInt(hex, 16);\n\t        const r = u >> 16;\n\t        const g = u >> 8 & 0xFF;\n\t        const b = u & 0xFF;\n\t        return [r,g,b,1];\n\t    }\n\n\t    // match rgba hex format, eg #FF000077\n\t    if (hex.match(RE_HEXA)) {\n\t        if (hex.length === 5 || hex.length === 9) {\n\t            // remove optional leading #\n\t            hex = hex.substr(1);\n\t        }\n\t        // expand short-notation to full eight-digit\n\t        if (hex.length === 4) {\n\t            hex = hex.split('');\n\t            hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3];\n\t        }\n\t        const u = parseInt(hex, 16);\n\t        const r = u >> 24 & 0xFF;\n\t        const g = u >> 16 & 0xFF;\n\t        const b = u >> 8 & 0xFF;\n\t        const a = Math.round((u & 0xFF) / 0xFF * 100) / 100;\n\t        return [r,g,b,a];\n\t    }\n\n\t    // we used to check for css colors here\n\t    // if _input.css? and rgb = _input.css hex\n\t    //     return rgb\n\n\t    throw new Error(`unknown hex color: ${hex}`);\n\t};\n\n\thex2rgb_1 = hex2rgb;\n\treturn hex2rgb_1;\n}\n\nvar hasRequiredHex;\n\nfunction requireHex () {\n\tif (hasRequiredHex) return hex;\n\thasRequiredHex = 1;\n\tconst chroma = requireChroma();\n\tconst Color = requireColor();\n\tconst {type} = requireUtils();\n\tconst input = requireInput();\n\n\tconst rgb2hex = requireRgb2hex();\n\n\tColor.prototype.hex = function(mode) {\n\t    return rgb2hex(this._rgb, mode);\n\t};\n\n\tchroma.hex = (...args) => new Color(...args, 'hex');\n\n\tinput.format.hex = requireHex2rgb();\n\tinput.autodetect.push({\n\t    p: 4,\n\t    test: (h, ...rest) => {\n\t        if (!rest.length && type(h) === 'string' && [3,4,5,6,7,8,9].indexOf(h.length) >= 0) {\n\t            return 'hex';\n\t        }\n\t    }\n\t});\n\treturn hex;\n}\n\nrequireHex();\n\nvar hsl = {};\n\nvar hasRequiredHsl$1;\n\nfunction requireHsl$1 () {\n\tif (hasRequiredHsl$1) return hsl;\n\thasRequiredHsl$1 = 1;\n\tconst {unpack, type} = requireUtils();\n\tconst chroma = requireChroma();\n\tconst Color = requireColor();\n\tconst input = requireInput();\n\n\tconst rgb2hsl = requireRgb2hsl();\n\n\tColor.prototype.hsl = function() {\n\t    return rgb2hsl(this._rgb);\n\t};\n\n\tchroma.hsl = (...args) => new Color(...args, 'hsl');\n\n\tinput.format.hsl = requireHsl2rgb();\n\n\tinput.autodetect.push({\n\t    p: 2,\n\t    test: (...args) => {\n\t        args = unpack(args, 'hsl');\n\t        if (type(args) === 'array' && args.length === 3) {\n\t            return 'hsl';\n\t        }\n\t    }\n\t});\n\treturn hsl;\n}\n\nrequireHsl$1();\n\nvar hsv = {};\n\nvar rgb2hsv;\nvar hasRequiredRgb2hsv;\n\nfunction requireRgb2hsv () {\n\tif (hasRequiredRgb2hsv) return rgb2hsv;\n\thasRequiredRgb2hsv = 1;\n\tconst {unpack} = requireUtils();\n\tconst {min,max} = Math;\n\n\t/*\n\t * supported arguments:\n\t * - rgb2hsv(r,g,b)\n\t * - rgb2hsv([r,g,b])\n\t * - rgb2hsv({r,g,b})\n\t */\n\tconst rgb2hsl = (...args) => {\n\t    args = unpack(args, 'rgb');\n\t    let [r,g,b] = args;\n\t    const min_ = min(r, g, b);\n\t    const max_ = max(r, g, b);\n\t    const delta = max_ - min_;\n\t    let h,s,v;\n\t    v = max_ / 255.0;\n\t    if (max_ === 0) {\n\t        h = Number.NaN;\n\t        s = 0;\n\t    } else {\n\t        s = delta / max_;\n\t        if (r === max_) h = (g - b) / delta;\n\t        if (g === max_) h = 2+(b - r) / delta;\n\t        if (b === max_) h = 4+(r - g) / delta;\n\t        h *= 60;\n\t        if (h < 0) h += 360;\n\t    }\n\t    return [h, s, v]\n\t};\n\n\trgb2hsv = rgb2hsl;\n\treturn rgb2hsv;\n}\n\nvar hsv2rgb_1;\nvar hasRequiredHsv2rgb;\n\nfunction requireHsv2rgb () {\n\tif (hasRequiredHsv2rgb) return hsv2rgb_1;\n\thasRequiredHsv2rgb = 1;\n\tconst {unpack} = requireUtils();\n\tconst {floor} = Math;\n\n\tconst hsv2rgb = (...args) => {\n\t    args = unpack(args, 'hsv');\n\t    let [h,s,v] = args;\n\t    let r,g,b;\n\t    v *= 255;\n\t    if (s === 0) {\n\t        r = g = b = v;\n\t    } else {\n\t        if (h === 360) h = 0;\n\t        if (h > 360) h -= 360;\n\t        if (h < 0) h += 360;\n\t        h /= 60;\n\n\t        const i = floor(h);\n\t        const f = h - i;\n\t        const p = v * (1 - s);\n\t        const q = v * (1 - s * f);\n\t        const t = v * (1 - s * (1 - f));\n\n\t        switch (i) {\n\t            case 0: [r,g,b] = [v, t, p]; break\n\t            case 1: [r,g,b] = [q, v, p]; break\n\t            case 2: [r,g,b] = [p, v, t]; break\n\t            case 3: [r,g,b] = [p, q, v]; break\n\t            case 4: [r,g,b] = [t, p, v]; break\n\t            case 5: [r,g,b] = [v, p, q]; break\n\t        }\n\t    }\n\t    return [r,g,b,args.length > 3?args[3]:1];\n\t};\n\n\thsv2rgb_1 = hsv2rgb;\n\treturn hsv2rgb_1;\n}\n\nvar hasRequiredHsv$1;\n\nfunction requireHsv$1 () {\n\tif (hasRequiredHsv$1) return hsv;\n\thasRequiredHsv$1 = 1;\n\tconst {unpack, type} = requireUtils();\n\tconst chroma = requireChroma();\n\tconst Color = requireColor();\n\tconst input = requireInput();\n\n\tconst rgb2hsv = requireRgb2hsv();\n\n\tColor.prototype.hsv = function() {\n\t    return rgb2hsv(this._rgb);\n\t};\n\n\tchroma.hsv = (...args) => new Color(...args, 'hsv');\n\n\tinput.format.hsv = requireHsv2rgb();\n\n\tinput.autodetect.push({\n\t    p: 2,\n\t    test: (...args) => {\n\t        args = unpack(args, 'hsv');\n\t        if (type(args) === 'array' && args.length === 3) {\n\t            return 'hsv';\n\t        }\n\t    }\n\t});\n\treturn hsv;\n}\n\nrequireHsv$1();\n\nvar named = {};\n\n/**\n\tX11 color names\n\n\thttp://www.w3.org/TR/css3-color/#svg-color\n*/\n\nvar w3cx11_1;\nvar hasRequiredW3cx11;\n\nfunction requireW3cx11 () {\n\tif (hasRequiredW3cx11) return w3cx11_1;\n\thasRequiredW3cx11 = 1;\n\tconst w3cx11 = {\n\t    aliceblue: '#f0f8ff',\n\t    antiquewhite: '#faebd7',\n\t    aqua: '#00ffff',\n\t    aquamarine: '#7fffd4',\n\t    azure: '#f0ffff',\n\t    beige: '#f5f5dc',\n\t    bisque: '#ffe4c4',\n\t    black: '#000000',\n\t    blanchedalmond: '#ffebcd',\n\t    blue: '#0000ff',\n\t    blueviolet: '#8a2be2',\n\t    brown: '#a52a2a',\n\t    burlywood: '#deb887',\n\t    cadetblue: '#5f9ea0',\n\t    chartreuse: '#7fff00',\n\t    chocolate: '#d2691e',\n\t    coral: '#ff7f50',\n\t    cornflower: '#6495ed',\n\t    cornflowerblue: '#6495ed',\n\t    cornsilk: '#fff8dc',\n\t    crimson: '#dc143c',\n\t    cyan: '#00ffff',\n\t    darkblue: '#00008b',\n\t    darkcyan: '#008b8b',\n\t    darkgoldenrod: '#b8860b',\n\t    darkgray: '#a9a9a9',\n\t    darkgreen: '#006400',\n\t    darkgrey: '#a9a9a9',\n\t    darkkhaki: '#bdb76b',\n\t    darkmagenta: '#8b008b',\n\t    darkolivegreen: '#556b2f',\n\t    darkorange: '#ff8c00',\n\t    darkorchid: '#9932cc',\n\t    darkred: '#8b0000',\n\t    darksalmon: '#e9967a',\n\t    darkseagreen: '#8fbc8f',\n\t    darkslateblue: '#483d8b',\n\t    darkslategray: '#2f4f4f',\n\t    darkslategrey: '#2f4f4f',\n\t    darkturquoise: '#00ced1',\n\t    darkviolet: '#9400d3',\n\t    deeppink: '#ff1493',\n\t    deepskyblue: '#00bfff',\n\t    dimgray: '#696969',\n\t    dimgrey: '#696969',\n\t    dodgerblue: '#1e90ff',\n\t    firebrick: '#b22222',\n\t    floralwhite: '#fffaf0',\n\t    forestgreen: '#228b22',\n\t    fuchsia: '#ff00ff',\n\t    gainsboro: '#dcdcdc',\n\t    ghostwhite: '#f8f8ff',\n\t    gold: '#ffd700',\n\t    goldenrod: '#daa520',\n\t    gray: '#808080',\n\t    green: '#008000',\n\t    greenyellow: '#adff2f',\n\t    grey: '#808080',\n\t    honeydew: '#f0fff0',\n\t    hotpink: '#ff69b4',\n\t    indianred: '#cd5c5c',\n\t    indigo: '#4b0082',\n\t    ivory: '#fffff0',\n\t    khaki: '#f0e68c',\n\t    laserlemon: '#ffff54',\n\t    lavender: '#e6e6fa',\n\t    lavenderblush: '#fff0f5',\n\t    lawngreen: '#7cfc00',\n\t    lemonchiffon: '#fffacd',\n\t    lightblue: '#add8e6',\n\t    lightcoral: '#f08080',\n\t    lightcyan: '#e0ffff',\n\t    lightgoldenrod: '#fafad2',\n\t    lightgoldenrodyellow: '#fafad2',\n\t    lightgray: '#d3d3d3',\n\t    lightgreen: '#90ee90',\n\t    lightgrey: '#d3d3d3',\n\t    lightpink: '#ffb6c1',\n\t    lightsalmon: '#ffa07a',\n\t    lightseagreen: '#20b2aa',\n\t    lightskyblue: '#87cefa',\n\t    lightslategray: '#778899',\n\t    lightslategrey: '#778899',\n\t    lightsteelblue: '#b0c4de',\n\t    lightyellow: '#ffffe0',\n\t    lime: '#00ff00',\n\t    limegreen: '#32cd32',\n\t    linen: '#faf0e6',\n\t    magenta: '#ff00ff',\n\t    maroon: '#800000',\n\t    maroon2: '#7f0000',\n\t    maroon3: '#b03060',\n\t    mediumaquamarine: '#66cdaa',\n\t    mediumblue: '#0000cd',\n\t    mediumorchid: '#ba55d3',\n\t    mediumpurple: '#9370db',\n\t    mediumseagreen: '#3cb371',\n\t    mediumslateblue: '#7b68ee',\n\t    mediumspringgreen: '#00fa9a',\n\t    mediumturquoise: '#48d1cc',\n\t    mediumvioletred: '#c71585',\n\t    midnightblue: '#191970',\n\t    mintcream: '#f5fffa',\n\t    mistyrose: '#ffe4e1',\n\t    moccasin: '#ffe4b5',\n\t    navajowhite: '#ffdead',\n\t    navy: '#000080',\n\t    oldlace: '#fdf5e6',\n\t    olive: '#808000',\n\t    olivedrab: '#6b8e23',\n\t    orange: '#ffa500',\n\t    orangered: '#ff4500',\n\t    orchid: '#da70d6',\n\t    palegoldenrod: '#eee8aa',\n\t    palegreen: '#98fb98',\n\t    paleturquoise: '#afeeee',\n\t    palevioletred: '#db7093',\n\t    papayawhip: '#ffefd5',\n\t    peachpuff: '#ffdab9',\n\t    peru: '#cd853f',\n\t    pink: '#ffc0cb',\n\t    plum: '#dda0dd',\n\t    powderblue: '#b0e0e6',\n\t    purple: '#800080',\n\t    purple2: '#7f007f',\n\t    purple3: '#a020f0',\n\t    rebeccapurple: '#663399',\n\t    red: '#ff0000',\n\t    rosybrown: '#bc8f8f',\n\t    royalblue: '#4169e1',\n\t    saddlebrown: '#8b4513',\n\t    salmon: '#fa8072',\n\t    sandybrown: '#f4a460',\n\t    seagreen: '#2e8b57',\n\t    seashell: '#fff5ee',\n\t    sienna: '#a0522d',\n\t    silver: '#c0c0c0',\n\t    skyblue: '#87ceeb',\n\t    slateblue: '#6a5acd',\n\t    slategray: '#708090',\n\t    slategrey: '#708090',\n\t    snow: '#fffafa',\n\t    springgreen: '#00ff7f',\n\t    steelblue: '#4682b4',\n\t    tan: '#d2b48c',\n\t    teal: '#008080',\n\t    thistle: '#d8bfd8',\n\t    tomato: '#ff6347',\n\t    turquoise: '#40e0d0',\n\t    violet: '#ee82ee',\n\t    wheat: '#f5deb3',\n\t    white: '#ffffff',\n\t    whitesmoke: '#f5f5f5',\n\t    yellow: '#ffff00',\n\t    yellowgreen: '#9acd32'\n\t};\n\n\tw3cx11_1 = w3cx11;\n\treturn w3cx11_1;\n}\n\nvar hasRequiredNamed;\n\nfunction requireNamed () {\n\tif (hasRequiredNamed) return named;\n\thasRequiredNamed = 1;\n\tconst Color = requireColor();\n\tconst input = requireInput();\n\tconst {type} = requireUtils();\n\n\tconst w3cx11 = requireW3cx11();\n\tconst hex2rgb = requireHex2rgb();\n\tconst rgb2hex = requireRgb2hex();\n\n\tColor.prototype.name = function() {\n\t    const hex = rgb2hex(this._rgb, 'rgb');\n\t    for (let n of Object.keys(w3cx11)) {\n\t        if (w3cx11[n] === hex) return n.toLowerCase();\n\t    }\n\t    return hex;\n\t};\n\n\tinput.format.named = (name) => {\n\t    name = name.toLowerCase();\n\t    if (w3cx11[name]) return hex2rgb(w3cx11[name]);\n\t    throw new Error('unknown color name: '+name);\n\t};\n\n\tinput.autodetect.push({\n\t    p: 5,\n\t    test: (h, ...rest) => {\n\t        if (!rest.length && type(h) === 'string' && w3cx11[h.toLowerCase()]) {\n\t            return 'named';\n\t        }\n\t    }\n\t});\n\treturn named;\n}\n\nrequireNamed();\n\nvar rgb = {};\n\nvar hasRequiredRgb$1;\n\nfunction requireRgb$1 () {\n\tif (hasRequiredRgb$1) return rgb;\n\thasRequiredRgb$1 = 1;\n\tconst chroma = requireChroma();\n\tconst Color = requireColor();\n\tconst input = requireInput();\n\tconst {unpack, type} = requireUtils();\n\tconst {round} = Math;\n\n\tColor.prototype.rgb = function(rnd=true) {\n\t    if (rnd === false) return this._rgb.slice(0,3);\n\t    return this._rgb.slice(0,3).map(round);\n\t};\n\n\tColor.prototype.rgba = function(rnd=true) {\n\t    return this._rgb.slice(0,4).map((v,i) => {\n\t        return i<3 ? (rnd === false ? v : round(v)) : v;\n\t    });\n\t};\n\n\tchroma.rgb = (...args) => new Color(...args, 'rgb');\n\n\tinput.format.rgb = (...args) => {\n\t    const rgba = unpack(args, 'rgba');\n\t    if (rgba[3] === undefined) rgba[3] = 1;\n\t    return rgba;\n\t};\n\n\tinput.autodetect.push({\n\t    p: 3,\n\t    test: (...args) => {\n\t        args = unpack(args, 'rgba');\n\t        if (type(args) === 'array' && (args.length === 3 ||\n\t            args.length === 4 && type(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) {\n\t            return 'rgb';\n\t        }\n\t    }\n\t});\n\treturn rgb;\n}\n\nrequireRgb$1();\n\nvar alpha = {};\n\nvar hasRequiredAlpha;\n\nfunction requireAlpha () {\n\tif (hasRequiredAlpha) return alpha;\n\thasRequiredAlpha = 1;\n\tconst Color = requireColor();\n\tconst {type} = requireUtils();\n\n\tColor.prototype.alpha = function(a, mutate=false) {\n\t    if (a !== undefined && type(a) === 'number') {\n\t        if (mutate) {\n\t            this._rgb[3] = a;\n\t            return this;\n\t        }\n\t        return new Color([this._rgb[0], this._rgb[1], this._rgb[2], a], 'rgb');\n\t    }\n\t    return this._rgb[3];\n\t};\n\treturn alpha;\n}\n\nrequireAlpha();\n\nvar _hsx;\nvar hasRequired_hsx;\n\nfunction require_hsx () {\n\tif (hasRequired_hsx) return _hsx;\n\thasRequired_hsx = 1;\n\tconst Color = requireColor();\n\n\t_hsx = (col1, col2, f, m) => {\n\t    let xyz0, xyz1;\n\t    if (m === 'hsl') {\n\t        xyz0 = col1.hsl();\n\t        xyz1 = col2.hsl();\n\t    } else if (m === 'hsv') {\n\t        xyz0 = col1.hsv();\n\t        xyz1 = col2.hsv();\n\t    } else if (m === 'hcg') {\n\t        xyz0 = col1.hcg();\n\t        xyz1 = col2.hcg();\n\t    } else if (m === 'hsi') {\n\t        xyz0 = col1.hsi();\n\t        xyz1 = col2.hsi();\n\t    } else if (m === 'lch' || m === 'hcl') {\n\t        m = 'hcl';\n\t        xyz0 = col1.hcl();\n\t        xyz1 = col2.hcl();\n\t    } else if (m === 'oklch') {\n\t        xyz0 = col1.oklch().reverse();\n\t        xyz1 = col2.oklch().reverse();\n\t    }\n\n\t    let hue0, hue1, sat0, sat1, lbv0, lbv1;\n\t    if (m.substr(0, 1) === 'h' || m === 'oklch') {\n\t        [hue0, sat0, lbv0] = xyz0;\n\t        [hue1, sat1, lbv1] = xyz1;\n\t    }\n\n\t    let sat, hue, lbv, dh;\n\n\t    if (!isNaN(hue0) && !isNaN(hue1)) {\n\t        // both colors have hue\n\t        if (hue1 > hue0 && hue1 - hue0 > 180) {\n\t            dh = hue1 - (hue0 + 360);\n\t        } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n\t            dh = hue1 + 360 - hue0;\n\t        } else {\n\t            dh = hue1 - hue0;\n\t        }\n\t        hue = hue0 + f * dh;\n\t    } else if (!isNaN(hue0)) {\n\t        hue = hue0;\n\t        if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') sat = sat0;\n\t    } else if (!isNaN(hue1)) {\n\t        hue = hue1;\n\t        if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') sat = sat1;\n\t    } else {\n\t        hue = Number.NaN;\n\t    }\n\n\t    if (sat === undefined) sat = sat0 + f * (sat1 - sat0);\n\t    lbv = lbv0 + f * (lbv1 - lbv0);\n\t    return m === 'oklch' ? new Color([lbv, sat, hue], m) : new Color([hue, sat, lbv], m);\n\t};\n\treturn _hsx;\n}\n\nvar interpolator;\nvar hasRequiredInterpolator;\n\nfunction requireInterpolator () {\n\tif (hasRequiredInterpolator) return interpolator;\n\thasRequiredInterpolator = 1;\n\tinterpolator = {};\n\treturn interpolator;\n}\n\nvar hsl_1;\nvar hasRequiredHsl;\n\nfunction requireHsl () {\n\tif (hasRequiredHsl) return hsl_1;\n\thasRequiredHsl = 1;\n\trequireHsl$1();\n\tconst interpolate_hsx = require_hsx();\n\n\tconst hsl = (col1, col2, f) => {\n\t\treturn interpolate_hsx(col1, col2, f, 'hsl');\n\t};\n\n\t// register interpolator\n\trequireInterpolator().hsl = hsl;\n\n\thsl_1 = hsl;\n\treturn hsl_1;\n}\n\nrequireHsl();\n\nvar hsv_1;\nvar hasRequiredHsv;\n\nfunction requireHsv () {\n\tif (hasRequiredHsv) return hsv_1;\n\thasRequiredHsv = 1;\n\trequireHsv$1();\n\tconst interpolate_hsx = require_hsx();\n\n\tconst hsv = (col1, col2, f) => {\n\t\treturn interpolate_hsx(col1, col2, f, 'hsv');\n\t};\n\n\t// register interpolator\n\trequireInterpolator().hsv = hsv;\n\n\thsv_1 = hsv;\n\treturn hsv_1;\n}\n\nrequireHsv();\n\nvar rgb_1;\nvar hasRequiredRgb;\n\nfunction requireRgb () {\n\tif (hasRequiredRgb) return rgb_1;\n\thasRequiredRgb = 1;\n\tconst Color = requireColor();\n\n\tconst rgb = (col1, col2, f) => {\n\t    const xyz0 = col1._rgb;\n\t    const xyz1 = col2._rgb;\n\t    return new Color(\n\t        xyz0[0] + f * (xyz1[0]-xyz0[0]),\n\t        xyz0[1] + f * (xyz1[1]-xyz0[1]),\n\t        xyz0[2] + f * (xyz1[2]-xyz0[2]),\n\t        'rgb'\n\t    )\n\t};\n\n\t// register interpolator\n\trequireInterpolator().rgb = rgb;\n\n\trgb_1 = rgb;\n\treturn rgb_1;\n}\n\nrequireRgb();\n\nvar mix$1;\nvar hasRequiredMix;\n\nfunction requireMix () {\n\tif (hasRequiredMix) return mix$1;\n\thasRequiredMix = 1;\n\tconst Color = requireColor();\n\tconst {type} = requireUtils();\n\tconst interpolator = requireInterpolator();\n\n\tmix$1 = (col1, col2, f=0.5, ...rest) => {\n\t    let mode = rest[0] || 'lrgb';\n\t    if (!interpolator[mode] && !rest.length) {\n\t        // fall back to the first supported mode\n\t        mode = Object.keys(interpolator)[0];\n\t    }\n\t    if (!interpolator[mode]) {\n\t        throw new Error(`interpolation mode ${mode} is not defined`);\n\t    }\n\t    if (type(col1) !== 'object') col1 = new Color(col1);\n\t    if (type(col2) !== 'object') col2 = new Color(col2);\n\t    return interpolator[mode](col1, col2, f)\n\t        .alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n\t};\n\treturn mix$1;\n}\n\nvar mixExports = requireMix();\nvar mix = /*@__PURE__*/getDefaultExportFromCjs(mixExports);\n\nvar scale$1;\nvar hasRequiredScale;\n\nfunction requireScale () {\n\tif (hasRequiredScale) return scale$1;\n\thasRequiredScale = 1;\n\t// minimal multi-purpose interface\n\n\t// @requires utils color analyze\n\n\tconst chroma = requireChroma();\n\tconst {type} = requireUtils();\n\n\tconst {pow} = Math;\n\n\tscale$1 = function(colors) {\n\n\t    // constructor\n\t    let _mode = 'rgb';\n\t    let _nacol = chroma('#ccc');\n\t    let _spread = 0;\n\t    // const _fixed = false;\n\t    let _domain = [0, 1];\n\t    let _pos = [];\n\t    let _padding = [0,0];\n\t    let _classes = false;\n\t    let _colors = [];\n\t    let _out = false;\n\t    let _min = 0;\n\t    let _max = 1;\n\t    let _correctLightness = false;\n\t    let _colorCache = {};\n\t    let _useCache = true;\n\t    let _gamma = 1;\n\n\t    // private methods\n\n\t    const setColors = function(colors) {\n\t        colors = colors || ['#fff', '#000'];\n\t        if (colors && type(colors) === 'string' && chroma.brewer &&\n\t            chroma.brewer[colors.toLowerCase()]) {\n\t            colors = chroma.brewer[colors.toLowerCase()];\n\t        }\n\t        if (type(colors) === 'array') {\n\t            // handle single color\n\t            if (colors.length === 1) {\n\t                colors = [colors[0], colors[0]];\n\t            }\n\t            // make a copy of the colors\n\t            colors = colors.slice(0);\n\t            // convert to chroma classes\n\t            for (let c=0; c<colors.length; c++) {\n\t                colors[c] = chroma(colors[c]);\n\t            }\n\t            // auto-fill color position\n\t            _pos.length = 0;\n\t            for (let c=0; c<colors.length; c++) {\n\t                _pos.push(c/(colors.length-1));\n\t            }\n\t        }\n\t        resetCache();\n\t        return _colors = colors;\n\t    };\n\n\t    const getClass = function(value) {\n\t        if (_classes != null) {\n\t            const n = _classes.length-1;\n\t            let i = 0;\n\t            while (i < n && value >= _classes[i]) {\n\t                i++;\n\t            }\n\t            return i-1;\n\t        }\n\t        return 0;\n\t    };\n\n\t    let tMapLightness = t => t;\n\t    let tMapDomain = t => t;\n\n\t    // const classifyValue = function(value) {\n\t    //     let val = value;\n\t    //     if (_classes.length > 2) {\n\t    //         const n = _classes.length-1;\n\t    //         const i = getClass(value);\n\t    //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class\n\t    //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class\n\t    //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));\n\t    //     }\n\t    //     return val;\n\t    // };\n\n\t    const getColor = function(val, bypassMap) {\n\t        let col, t;\n\t        if (bypassMap == null) { bypassMap = false; }\n\t        if (isNaN(val) || (val === null)) { return _nacol; }\n\t        if (!bypassMap) {\n\t            if (_classes && (_classes.length > 2)) {\n\t                // find the class\n\t                const c = getClass(val);\n\t                t = c / (_classes.length-2);\n\t            } else if (_max !== _min) {\n\t                // just interpolate between min/max\n\t                t = (val - _min) / (_max - _min);\n\t            } else {\n\t                t = 1;\n\t            }\n\t        } else {\n\t            t = val;\n\t        }\n\n\t        // domain map\n\t        t = tMapDomain(t);\n\n\t        if (!bypassMap) {\n\t            t = tMapLightness(t);  // lightness correction\n\t        }\n\n\t        if (_gamma !== 1) { t = pow(t, _gamma); }\n\n\t        t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n\n\t        t = Math.min(1, Math.max(0, t));\n\n\t        const k = Math.floor(t * 10000);\n\n\t        if (_useCache && _colorCache[k]) {\n\t            col = _colorCache[k];\n\t        } else {\n\t            if (type(_colors) === 'array') {\n\t                //for i in [0.._pos.length-1]\n\t                for (let i=0; i<_pos.length; i++) {\n\t                    const p = _pos[i];\n\t                    if (t <= p) {\n\t                        col = _colors[i];\n\t                        break;\n\t                    }\n\t                    if ((t >= p) && (i === (_pos.length-1))) {\n\t                        col = _colors[i];\n\t                        break;\n\t                    }\n\t                    if (t > p && t < _pos[i+1]) {\n\t                        t = (t-p)/(_pos[i+1]-p);\n\t                        col = chroma.interpolate(_colors[i], _colors[i+1], t, _mode);\n\t                        break;\n\t                    }\n\t                }\n\t            } else if (type(_colors) === 'function') {\n\t                col = _colors(t);\n\t            }\n\t            if (_useCache) { _colorCache[k] = col; }\n\t        }\n\t        return col;\n\t    };\n\n\t    var resetCache = () => _colorCache = {};\n\n\t    setColors(colors);\n\n\t    // public interface\n\n\t    const f = function(v) {\n\t        const c = chroma(getColor(v));\n\t        if (_out && c[_out]) { return c[_out](); } else { return c; }\n\t    };\n\n\t    f.classes = function(classes) {\n\t        if (classes != null) {\n\t            if (type(classes) === 'array') {\n\t                _classes = classes;\n\t                _domain = [classes[0], classes[classes.length-1]];\n\t            } else {\n\t                const d = chroma.analyze(_domain);\n\t                if (classes === 0) {\n\t                    _classes = [d.min, d.max];\n\t                } else {\n\t                    _classes = chroma.limits(d, 'e', classes);\n\t                }\n\t            }\n\t            return f;\n\t        }\n\t        return _classes;\n\t    };\n\n\n\t    f.domain = function(domain) {\n\t        if (!arguments.length) {\n\t            return _domain;\n\t        }\n\t        _min = domain[0];\n\t        _max = domain[domain.length-1];\n\t        _pos = [];\n\t        const k = _colors.length;\n\t        if ((domain.length === k) && (_min !== _max)) {\n\t            // update positions\n\t            for (let d of Array.from(domain)) {\n\t                _pos.push((d-_min) / (_max-_min));\n\t            }\n\t        } else {\n\t            for (let c=0; c<k; c++) {\n\t                _pos.push(c/(k-1));\n\t            }\n\t            if (domain.length > 2) {\n\t                // set domain map\n\t                const tOut = domain.map((d,i) => i/(domain.length-1));\n\t                const tBreaks = domain.map(d => (d - _min) / (_max - _min));\n\t                if (!tBreaks.every((val, i) => tOut[i] === val)) {\n\t                    tMapDomain = (t) => {\n\t                        if (t <= 0 || t >= 1) return t;\n\t                        let i = 0;\n\t                        while (t >= tBreaks[i+1]) i++;\n\t                        const f = (t - tBreaks[i]) / (tBreaks[i+1] - tBreaks[i]);\n\t                        const out = tOut[i] + f * (tOut[i+1] - tOut[i]);\n\t                        return out;\n\t                    };\n\t                }\n\n\t            }\n\t        }\n\t        _domain = [_min, _max];\n\t        return f;\n\t    };\n\n\t    f.mode = function(_m) {\n\t        if (!arguments.length) {\n\t            return _mode;\n\t        }\n\t        _mode = _m;\n\t        resetCache();\n\t        return f;\n\t    };\n\n\t    f.range = function(colors, _pos) {\n\t        setColors(colors);\n\t        return f;\n\t    };\n\n\t    f.out = function(_o) {\n\t        _out = _o;\n\t        return f;\n\t    };\n\n\t    f.spread = function(val) {\n\t        if (!arguments.length) {\n\t            return _spread;\n\t        }\n\t        _spread = val;\n\t        return f;\n\t    };\n\n\t    f.correctLightness = function(v) {\n\t        if (v == null) { v = true; }\n\t        _correctLightness = v;\n\t        resetCache();\n\t        if (_correctLightness) {\n\t            tMapLightness = function(t) {\n\t                const L0 = getColor(0, true).lab()[0];\n\t                const L1 = getColor(1, true).lab()[0];\n\t                const pol = L0 > L1;\n\t                let L_actual = getColor(t, true).lab()[0];\n\t                const L_ideal = L0 + ((L1 - L0) * t);\n\t                let L_diff = L_actual - L_ideal;\n\t                let t0 = 0;\n\t                let t1 = 1;\n\t                let max_iter = 20;\n\t                while ((Math.abs(L_diff) > 1e-2) && (max_iter-- > 0)) {\n\t                    (function() {\n\t                        if (pol) { L_diff *= -1; }\n\t                        if (L_diff < 0) {\n\t                            t0 = t;\n\t                            t += (t1 - t) * 0.5;\n\t                        } else {\n\t                            t1 = t;\n\t                            t += (t0 - t) * 0.5;\n\t                        }\n\t                        L_actual = getColor(t, true).lab()[0];\n\t                        return L_diff = L_actual - L_ideal;\n\t                    })();\n\t                }\n\t                return t;\n\t            };\n\t        } else {\n\t            tMapLightness = t => t;\n\t        }\n\t        return f;\n\t    };\n\n\t    f.padding = function(p) {\n\t        if (p != null) {\n\t            if (type(p) === 'number') {\n\t                p = [p,p];\n\t            }\n\t            _padding = p;\n\t            return f;\n\t        } else {\n\t            return _padding;\n\t        }\n\t    };\n\n\t    f.colors = function(numColors, out) {\n\t        // If no arguments are given, return the original colors that were provided\n\t        if (arguments.length < 2) { out = 'hex'; }\n\t        let result = [];\n\n\t        if (arguments.length === 0) {\n\t            result = _colors.slice(0);\n\n\t        } else if (numColors === 1) {\n\t            result = [f(0.5)];\n\n\t        } else if (numColors > 1) {\n\t            const dm = _domain[0];\n\t            const dd = _domain[1] - dm;\n\t            result = __range__(0, numColors).map(i => f( dm + ((i/(numColors-1)) * dd) ));\n\n\t        } else { // returns all colors based on the defined classes\n\t            colors = [];\n\t            let samples = [];\n\t            if (_classes && (_classes.length > 2)) {\n\t                for (let i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--) {\n\t                    samples.push((_classes[i-1]+_classes[i])*0.5);\n\t                }\n\t            } else {\n\t                samples = _domain;\n\t            }\n\t            result = samples.map(v => f(v));\n\t        }\n\n\t        if (chroma[out]) {\n\t            result = result.map(c => c[out]());\n\t        }\n\t        return result;\n\t    };\n\n\t    f.cache = function(c) {\n\t        if (c != null) {\n\t            _useCache = c;\n\t            return f;\n\t        } else {\n\t            return _useCache;\n\t        }\n\t    };\n\n\t    f.gamma = function(g) {\n\t        if (g != null) {\n\t            _gamma = g;\n\t            return f;\n\t        } else {\n\t            return _gamma;\n\t        }\n\t    };\n\n\t    f.nodata = function(d) {\n\t        if (d != null) {\n\t            _nacol = chroma(d);\n\t            return f;\n\t        } else {\n\t            return _nacol;\n\t        }\n\t    };\n\n\t    return f;\n\t};\n\n\tfunction __range__(left, right, inclusive) {\n\t  let range = [];\n\t  let ascending = left < right;\n\t  let end = right ;\n\t  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n\t    range.push(i);\n\t  }\n\t  return range;\n\t}\n\treturn scale$1;\n}\n\nvar scaleExports = requireScale();\nvar scale = /*@__PURE__*/getDefaultExportFromCjs(scaleExports);\n\n/*\n * Copyright (c) 2022 WeatherLayers.com\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n// custom lightweight Chroma.js bundle\n// see https://github.com/gka/chroma.js/blob/main/index.js\nchroma.mix = chroma.interpolate = mix;\nchroma.scale = scale;\n\nconst LINE_SEPARATOR_REGEX = /[ ,\\t:]+/g;\nconst COLOR_SEPARATOR_REGEX = /[\\-\\/]/g;\nfunction isLineComment(line) {\n    return line.startsWith('#');\n}\nfunction isGmt4Text(lines) {\n    return lines.some(line => {\n        if (!isLineComment(line)) {\n            if (line.split(LINE_SEPARATOR_REGEX).length >= 8) {\n                return true;\n            }\n        }\n        return false;\n    });\n}\nfunction isGmt5Text(lines) {\n    return lines.some(line => {\n        if (!isLineComment(line)) {\n            if (line.match(/\\d+\\-\\d+\\-\\d+/) || line.match(/\\d+\\/\\d+\\/\\d+/)) {\n                return true;\n            }\n        }\n        return false;\n    });\n}\nfunction getMode(lines) {\n    const modeLine = lines.find(line => isLineComment(line) && line.includes('COLOR_MODEL = '));\n    if (modeLine) {\n        const match = modeLine.match(/COLOR_MODEL = ([a-zA-Z]+)/);\n        if (match) {\n            return match[1].toLowerCase();\n        }\n    }\n    return undefined;\n}\nfunction splitColor(color) {\n    const colorArray = color.split(COLOR_SEPARATOR_REGEX);\n    return colorArray.length === 1 ? colorArray[0] : colorArray;\n}\nfunction parsePaletteTextInternal(paletteText) {\n    const lines = paletteText.trim().split('\\n');\n    const isGmt4 = isGmt4Text(lines);\n    const isGmt5 = isGmt5Text(lines);\n    const mode = getMode(lines);\n    const paletteLines = lines.filter(x => !!x && !x.startsWith('#'));\n    const paletteArray = [];\n    for (let paletteLine of paletteLines) {\n        const fields = paletteLine.split(LINE_SEPARATOR_REGEX);\n        if (isGmt4) {\n            if (fields.length === 8 || fields.length === 9) {\n                paletteArray.push([fields[0], [fields[1], fields[2], fields[3]]]);\n                paletteArray.push([fields[4], [fields[5], fields[6], fields[7]]]);\n            }\n            else if (fields.length === 4 || fields.length === 5) {\n                paletteArray.push([fields[0], [fields[1], fields[2], fields[3]]]);\n            }\n            else ;\n        }\n        else if (isGmt5) {\n            if (fields.length === 4 || fields.length === 5) {\n                paletteArray.push([fields[0], splitColor(fields[1])]);\n                paletteArray.push([fields[2], splitColor(fields[3])]);\n            }\n            else if (fields.length === 2 || fields.length === 3) {\n                paletteArray.push([fields[0], splitColor(fields[1])]);\n            }\n            else ;\n        }\n        else {\n            if (fields.length === 5) {\n                paletteArray.push([fields[0], [fields[1], fields[2], fields[3], fields[4]]]);\n            }\n            else if (fields.length === 4) {\n                paletteArray.push([fields[0], [fields[1], fields[2], fields[3]]]);\n            }\n            else if (fields.length === 2) {\n                paletteArray.push([fields[0], fields[1]]);\n            }\n            else ;\n        }\n    }\n    return { paletteArray, mode };\n}\n\n/*\n * Copyright (c) 2022 WeatherLayers.com\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\nconst DEFAULT_MODE = 'rgb';\nfunction parseValue(value, bounds) {\n    if (typeof value === 'string') {\n        if (value[value.length - 1] === '%') {\n            const percentage = parseFloat(value) / 100;\n            if (percentage < 0 || percentage > 1) {\n                throw new Error(`Invalid value for a percentage ${value}`);\n            }\n            return bounds[0] + (bounds[1] - bounds[0]) * percentage;\n        }\n        else if (value === 'N') {\n            return null; // GMT nodata\n        }\n        else if (value === 'B') {\n            return undefined; // GMT background (value < min), not supported yet, ignore\n        }\n        else if (value === 'F') {\n            return undefined; // GMT foreground (value > max), not supported yet, ignore\n        }\n        else if (value === 'nv') {\n            return null; // GDAL nodata\n        }\n        else if (value === 'default') {\n            return undefined; // GRASS default (value < min || value > max), not supported yet, ignore\n        }\n        else if (value === 'null') {\n            return null; // PostGIS nodata\n        }\n        else if (value === 'nodata') {\n            return null; // PostGIS nodata\n        }\n        else {\n            return parseFloat(value);\n        }\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error('Invalid state');\n    }\n}\nfunction parseColor(color, mode) {\n    if (Array.isArray(color)) {\n        if (color.length === 4) {\n            // color with alpha\n            return {\n                [mode[0]]: parseFloat(color[0].toString()),\n                [mode[1]]: parseFloat(color[1].toString()),\n                [mode[2]]: parseFloat(color[2].toString()),\n                a: parseFloat(color[3].toString()) / 255,\n            };\n        }\n        else if (color.length === 3) {\n            // color\n            return {\n                [mode[0]]: parseFloat(color[0].toString()),\n                [mode[1]]: parseFloat(color[1].toString()),\n                [mode[2]]: parseFloat(color[2].toString()),\n            };\n        }\n        else {\n            throw new Error(`Invalid color ${color}`);\n        }\n    }\n    else if (typeof color === 'string' || typeof color === 'number') {\n        if (color.toString().match(/^\\d+$/) || typeof color === 'number') {\n            // grayscale color\n            return {\n                [mode[0]]: parseFloat(color.toString()),\n                [mode[1]]: parseFloat(color.toString()),\n                [mode[2]]: parseFloat(color.toString()),\n            };\n        }\n        else {\n            // color name\n            return color;\n        }\n    }\n    else {\n        throw new Error(`Invalid color ${color}`);\n    }\n}\nfunction parsePaletteArray(paletteArray, { bounds = [0, 1], mode = DEFAULT_MODE } = {}) {\n    const colors = [];\n    const domain = [];\n    let nodata;\n    for (let [value, color] of paletteArray) {\n        const parsedValue = parseValue(value, bounds);\n        const parsedColor = parseColor(color, mode);\n        if (parsedValue != null) {\n            colors.push(parsedColor);\n            domain.push(parsedValue);\n        }\n        else if (parsedValue === null) {\n            nodata = parsedColor;\n        }\n        else ;\n    }\n    let palette = chroma.scale(colors).domain(domain).mode(mode);\n    if (typeof nodata !== 'undefined') {\n        palette = palette.nodata(nodata);\n    }\n    return palette;\n}\nfunction parsePaletteText(paletteText, { bounds = [0, 1] } = {}) {\n    const { paletteArray, mode } = parsePaletteTextInternal(paletteText);\n    return parsePaletteArray(paletteArray, { bounds, mode });\n}\nfunction parsePalette(palette, { bounds = [0, 1] } = {}) {\n    if (typeof palette === 'string') {\n        return parsePaletteText(palette, { bounds });\n    }\n    else if (Array.isArray(palette)) {\n        return parsePaletteArray(palette, { bounds });\n    }\n    else {\n        throw new Error('Invalid format');\n    }\n}\n\nfunction colorRampCanvas(scale, { width = 256, height = 1 } = {}) {\n    const colors = scale.colors(width, 'css');\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.imageRendering = '-moz-crisp-edges';\n    canvas.style.imageRendering = 'pixelated';\n    const ctx = canvas.getContext('2d');\n    for (let i = 0; i < width; i++) {\n        ctx.fillStyle = colors[i];\n        ctx.fillRect(i, 0, 1, height);\n    }\n    return canvas;\n}\n\nexport { colorRampCanvas, parsePalette };\n//# sourceMappingURL=cpt2js.js.map\n"],
  "mappings": "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",
  "names": ["limit", "rgb", "type", "last", "clip_rgb", "chroma", "unpack", "input", "css", "hsl", "hex", "rgb2hsv", "hsv", "interpolator", "colors", "f", "_pos", "scale"]
}
